
/* Task 1: Data Exploration and Cleaning */

/* 1. Load the dataset into a SQL database and examine its structure. */
SELECT * FROM Customers;
SELECT * FROM Products;
SELECT * FROM Sales;
SELECT * FROM Inventory;
 

/* 2. Identify and handle missing values appropriately (e.g., remove rows, impute values). /*

REMOVE ROWS : SELECT * FROM Customers where name IS NOT NULL;
IMPUTE VALUES: NVL AND COALESCE are used to handle null values in sql.
NVL takes two arguments where as COALESCE takes more than two values 
and both returns first non null values


/* 3. Perform any necessary data cleaning operations to ensure data integrity and
consistency */
Data integrity refers to the overall accuracy, completeness, and reliability of data. 
It can be specified by the lack of variation between two instances or consecutive updates of a record,
indicating that your information is error-free.


/* Task 2: Data Analysis */

/* 1. Calculate the total revenue generated by the company for each product category.*/

SELECT 
	p.category,
    SUM(p.price*s.quantity) AS total_revenue
from Products p 
join Sales s 
on p.product_id = s.product_id
GROUP BY p.category;



/*2. Determine the top 5 customers who have made the highest total purchases, considering
the customer's age and gender.*/

SELECT 
	c.name,
    c.customer_id,
    c.age, 
    c.gender , 
   sum(s.amount) as total_amount 
from Customers c 
join Sales s 
on c.customer_id = s.customer_id
group by c.customer_id,c.age,c.gender,c.name
order by total_amount desc
limit 5



/* 3. Identify the most profitable product category by calculating the average revenue per unit
sold.*/   

with cte AS
(SELECT
	p.category,
  	SUM(p.price * s.quantity) AS total_revenue, SUM(s.quantity) AS total_quantity
FROM Products p 
JOIN Sales s 
ON p.product_id = s.product_id
GROUP BY p.category
)

SELECT category, total_revenue/total_quantity AS  avg_revenue_unit FROM cte 
ORDER BY avg_revenue_unit DESC
LIMIT 1





/* 4. Analyze the inventory data and identify products that need restocking (stock count less
than a specified threshold).*/

SELECT 
    p.name as product_name,
     i.stock_count 
from Products p
JOIN Inventory i
on p.product_id = i.product_id
Where i.stock_count <=50;

/* Task 3: Advanced Analysis and Reporting*/

/*1. Write a SQL query to calculate the average age of customers for each product category.*/
SELECT 
	p.category,
	ROUND(AVG(C.age::numeric),0)AS average_age
FROM Products p  
JOIN Sales s 
on p.product_id = s.product_id
join Customers c 
on c.customer_id = s.customer_id
group by p.category;



/*2. Write a SQL query to retrieve the top 3 product categories that have the highest average
transaction amount.*/
 SELECT 
    p.category, p.name,
	ROUND(AVG(s.amount),2) AS transaction_amount
FROM Sales s JOIN products p 
ON s.product_id= p.product_id
GROUP BY p.category, p.name
ORDER BY transaction_amount DESC
LIMIT 3;




